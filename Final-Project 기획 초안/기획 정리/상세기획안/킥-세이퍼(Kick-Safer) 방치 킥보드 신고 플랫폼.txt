킥-세이퍼(Kick-Safer) 방치 킥보드 신고 플랫폼

1. 프로젝트 개요
1.1. 프로젝트명: 킥-세이퍼(Kick-Safer)
1.2. 프로젝트 목표: 시민 참여를 통해 도시의 방치된 공유 킥보드 문제를 해결하고, 수집된 데이터를 바탕으로 모두에게 안전한 PM(개인형 이동장치) 이용 환경을 조성하는 Civic-Tech 플랫폼을 구축한다.
1.3. 기획 배경: 공유 킥보드의 편리함 이면에 무단 방치로 인한 보행자 안전 위협, 도시 미관 훼손 등 심각한 사회적 갈등이 존재하며, 이를 해결할 기술적 대안이 시급하다.
1.4. 기대 효과:
사용자(시민): 보행 환경 개선, 안전한 PM 이용 경로 정보 획득.
PM 운영사/지자체: 방치된 기기 위치를 신속하게 파악하여 효율적인 수거 및 관리가 가능.
2. PoC 범위 및 핵심 기능
2.1. 개발 목표: 6주 내 사용자가 사진과 위치 정보로 방치 킥보드를 신고하고, 신고 내용이 지도 위에 실시간으로 시각화되는 MVP 웹 애플리케이션 개발.
2.2. 사용자 역할 정의: 일반 시민, PM 업체 담당자, 관리자
2.3. 핵심 기능 명세:
공통: 모바일 브라우저의 GPS 기능 및 카메라 접근 권한 요청 및 처리.
[핵심 UI] Naver/Kakao Maps API와 연동된 인터랙티브 지도가 화면의 중심.
지도 위에 신고된 킥보드 위치를 클러스터(Cluster) 형태로 표시하고, 확대 시 개별 마커로 표시.
신고하기 버튼 클릭 시, 사진 촬영 및 간단한 정보 입력이 가능한 모달 창.
2.4. 제외 기능 (Out of Scope): 킥보드 QR 인식으로 업체 자동 식별, 신고자에 대한 리워드 시스템, 안전경로 길찾기 알고리즘.
3. 시스템 아키텍처
3.1. 기술 스택
Frontend: React, axios, React Router, 외부 지도 API Wrapper(e.g., react-kakao-maps-sdk)
Backend: Java 17+, Spring Boot 3.x, Spring Security + JWT
Database: PostgreSQL + PostGIS (공간 데이터 처리 확장)
3.2. 프론트엔드: React 기반의 SPA. 지도 API 라이브러리를 효과적으로 제어하여 위치 기반 데이터 시각화 및 사용자 인터랙션을 구현.
3.3. 백엔드 아키텍처: API Gateway + 3 Microservices
3.4. 백엔드 역할 분담 (4명):
Service A: User-Service: 시민/업체 담당자 회원가입, 로그인, 역할 기반 접근 제어.
Service B: Report-Service: 핵심 서비스. 신고(이미지, 좌표) 접수, 위치 데이터를 DB(PostGIS)에 저장.
Service C: Map-Service: 특정 지도 범위 내의 모든 신고 데이터를 조회하여 프론트엔드에 전달하는 API 서버.
4. 데이터베이스 모델링 (PostgreSQL + PostGIS)
users (id, email, password, role, company_name)
reports (id, reporter_id, location GEOMETRY(Point, 4326), image_url, description, status, created_at)
참고: 위치기반 쿼리를 위해 PostgreSQL의 PostGIS 확장 기능 설치 및 활용이 필수적임.
5. 최종 산출물
프론트엔드 소스코드 (GitHub Repository)
백엔드 소스코드 (GitHub Repository)
실행 가능한 데모 서버 URL (Azure 배포)
Swagger UI로 생성된 API 명세서
프로젝트 최종 발표 자료(PPT)
6. 배포 아키텍처 (Deployment Architecture - Azure)
6.1. 배포 목표: GitHub Actions를 통해 CI/CD를 구축하고, React Frontend와 Spring Boot MSA를 Azure의 관리형 서비스에 독립적으로 배포하여 안정적인 운영 환경을 마련한다.
6.2. Azure 서비스 활용 계획:
구분	컴포넌트	활용 Azure 서비스	선정 이유
Frontend	React SPA	Azure Static Web Apps	SPA 호스팅 및 CI/CD 구축에 최적화.
Backend	Spring Boot Microservices	Azure Container Apps	MSA 운영에 최적화된 서버리스 컨테이너 플랫폼.
Database	PostgreSQL + PostGIS	Azure Database for PostgreSQL	PostGIS 확장을 지원하므로 공간 데이터 처리가 가능.
Container	Docker Images	Azure Container Registry (ACR)	프라이빗 Docker 이미지 저장 및 관리.
CI/CD	자동화 파이프라인	GitHub Actions	Azure 서비스들과의 완벽한 연동.

Sheets로 내보내기
6.3. 배포 흐름 (CI/CD Pipeline): 개발자가 코드를 GitHub에 Push하면, GitHub Actions가 이를 감지하여 FE는 Static Web Apps로, BE는 Docker 이미지를 빌드해 ACR을 거쳐 Container Apps로 자동 배포.