Full-Stack PoC 프로젝트 공통 가이드라인

문서 목적: 본 문서는 '주니어 개발자 6인, 1.5개월' 조건으로 진행되는 모든 PoC 프로젝트 후보들이 공통적으로 준수해야 할 목표, 기술 스택, 협업 방식, 배포 아키텍처 및 최종 산출물을 정의합니다. 어떤 프로젝트를 선택하든, 팀은 이 가이드라인을 최우선 기준으로 삼습니다.

1. 프로젝트 공통 개요
1.1. 목표
React와 Spring Boot를 활용한 Full-Stack 웹 애플리케이션 PoC(Proof of Concept)를 1.5개월 내에 성공적으로 완성한다.
명확한 역할 분담(Frontend/Backend)을 통해 효율적인 협업 프로세스를 경험하고, 완성도 높은 포트폴리오를 제작한다.
단순한 기술 구현을 넘어, 사회 문제에 대한 이해와 해결 능력을 보여주는 결과물을 만든다.
1.2. 핵심 제약 조건
인원: 주니어 개발자 6명
기간: 1.5개월 (총 6주)
결과물: 핵심 기능이 동작하는 MVP(Minimum Viable Product)
1.3. 공통 기술 스택
Frontend: React, axios (API 통신), React Router (라우팅), Zustand 또는 Recoil (상태 관리)
Backend: Java 17+, Spring Boot 3.x, Spring Security + JWT
Database: PostgreSQL
Data Access: Spring Data JPA
Version Control: Git, GitHub (FE/BE Repository 분리)
Build Tool: Gradle (Backend), npm 또는 yarn (Frontend)
1.4. 추천 협업 방식: Frontend 2명 / Backend 4명
Frontend팀 (2명): 사용자에게 보여지는 모든 UI/UX를 책임집니다. React 컴포넌트 개발, 상태 관리, 백엔드 API 호출 및 데이터 시각화를 담당합니다.
Backend팀 (4명): 3개의 마이크로서비스(MSA) 개발 및 API 설계를 책임집니다. 4명이 3개의 서비스를 유연하게 담당하며(e.g., 2명-1명-1명), 데이터 처리, 비즈니스 로직, 서버 인프라를 구축합니다.
2. 공통 실행 로드맵 (6주)
1주차: 기획 확정 및 설계

[목표] 최종 프로젝트 선정, 팀별 역할 분담, 상세 기능 명세 확정.
[산출물] Git Repository 생성(FE/BE), README.md, API 명세서(by Swagger), DB 스키마(ERD).
2-3주차: 핵심 기능 구현 (팀별 집중 개발)

[목표] 각 팀은 맡은 영역(FE 컴포넌트, BE 서비스)의 핵심 기능을 모두 개발 완료. 단위 테스트 작성.
[산출물] 각 서비스별 실행 가능한 Jar 파일, 주요 기능별 React 컴포넌트, Postman API 테스트 결과.
4주차: 서비스 연동 및 통합 테스트

[목표] FE와 BE를 연결하고, 회원가입부터 핵심 기능까지 이어지는 전체 시나리오 테스트. API Gateway 연동.
[산출물] 통합 테스트 시나리오 문서, 주요 버그 리포트.
5주차: 고도화 및 안정화

[목표] 주요 버그 수정, 사용자 피드백을 바탕으로 UI/UX 개선, 코드 리팩토링.
[산출물] 사용자가 직접 조작 가능한 안정화된 데모 웹사이트.
6주차: 배포, 문서화 및 발표 준비

[목표] Azure 배포 파이프라인(CI/CD) 완성, 프로젝트 소개 README 최종 완성, 발표 자료(PPT) 제작.
[산출물] Azure에 배포 완료된 최종 결과물, 완성된 소스코드, 최종 발표 자료.
3. 공통 배포 아키텍처 (Deployment Architecture - Azure)
3.1. 배포 목표
GitHub Actions를 통해 CI/CD를 구축하고, React Frontend와 Spring Boot MSA를 Azure의 관리형 서비스에 독립적으로 배포하여 안정적인 운영 환경을 마련한다.
각 컴포넌트에 최적화된 Azure의 관리형(Managed) 서비스를 활용하여 인프라 관리 부담을 최소화한다.
3.2. Azure 서비스 활용 계획
구분	컴포넌트	활용 Azure 서비스	선정 이유
Frontend	React SPA	Azure Static Web Apps	SPA 호스팅 및 CI/CD 구축에 최적화. 글로벌 CDN 기본 제공.
Backend	Spring Boot Microservices	Azure Container Apps	MSA 운영에 최적화된 서버리스 컨테이너 플랫폼. 비용 효율적.
Database	PostgreSQL	Azure Database for PostgreSQL	완전 관리형 서비스로 DB 운영 부담 최소화. (필요시 PostGIS 확장 지원)
Container	Docker Images	Azure Container Registry (ACR)	프라이빗 Docker 이미지 저장 및 관리.
CI/CD	자동화 파이프라인	GitHub Actions	Azure 서비스들과의 완벽한 연동을 통한 CI/CD 자동화.

Sheets로 내보내기
3.3. 배포 흐름 (CI/CD Pipeline)
개발자가 코드를 수정하고 GitHub에 push 합니다.
GitHub Actions가 변경을 감지하고 워크플로우를 실행합니다.
Frontend: React 프로젝트 build → Azure Static Web Apps에 자동 배포.
Backend: Spring Boot 앱 build → Docker 이미지 생성 → ACR에 push → Azure Container Apps에 자동 배포.
배포가 완료되면, 사용자는 새로운 버전의 서비스를 즉시 이용할 수 있습니다.
4. 공통 최종 산출물
프론트엔드 소스코드 (GitHub Repository)
백엔드 소스코드 (GitHub Repository)
실행 가능한 데모 서버 URL (Azure 배포)
Swagger UI로 생성된 API 명세서
프로젝트 최종 발표 자료 (PPT)
프로젝트 관리 문서 (ERD, 요구사항 명세서 등)