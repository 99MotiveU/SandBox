폴리시-코인(Policy-Coin) PoC 플랫폼 - 최종 기획안

1. 프로젝트 개요
1.1. 프로젝트명: 폴리시-코인(Policy-Coin) PoC 플랫폼
1.2. 프로젝트 목표: 정부의 정책 지원금이 가상의 원화 연동 스테이블 코인(KRW-S)으로 지급되고, 지역 상점에서 사용되는 전 과정을 구현하여 핀테크와 공공 정책 결합 모델의 기술적 타당성을 검증한다.
1.3. 기획 배경: 블록체인 기술의 사회적 효용에 대한 관심이 높아지는 가운데, 투명하고 효율적인 정책 자금 집행 수단으로서 스테이블 코인의 가능성을 탐색할 필요가 있다.
1.4. 기대 효과:
사용자: 앱 하나로 간편하게 지원금을 받고, QR코드로 편리하게 결제하는 경험.
정부/지자체: 정책 자금의 사용처를 투명하게 추적하고, 데이터 기반의 정책 효과 분석 토대 마련.
2. PoC 범위 및 핵심 기능
2.1. 개발 목표: 6주 내 DB를 가상 원장으로 활용하여, 관리자-시민-가맹점 간 KRW-S의 발행, 지급, 결제, 정산의 핵심 사이클이 동작하는 MVP 웹 애플리케이션 개발.
2.2. 사용자 역할 정의: 관리자, 시민, 가맹점주
2.3. 핵심 기능 명세: (이전과 동일)
2.4. 제외 기능 (Out of Scope): (이전과 동일)
3. 시스템 아키텍처
3.1. 기술 스택
Frontend: React, axios, React Router
Backend: Java 17+, Spring Boot 3.x, Spring Security + JWT
Database: PostgreSQL
3.2. 프론트엔드: React 기반의 SPA(Single Page Application)로 구현. 사용자의 모든 요청은 API Gateway를 통해 백엔드와 통신.
3.3. 백엔드 아키텍처: API Gateway + 3 Microservices
3.4. 백엔드 역할 분담 (4명):
Service A: User-Service: 회원가입, 로그인, 인증/인가, 정보 관리.
Service B: Wallet-Service: KRW-S 지갑 관리, 잔액 조회, 지원금 발행 로직 처리.
Service C: Payment-Service: 결제 및 거래 원장 관리, 다른 서비스 API 호출 및 트랜잭션 처리.
4. 데이터베이스 모델링 (PostgreSQL)
users (id, email, password, role, name)
wallets (id, user_id, balance)
transactions (id, from_wallet_id, to_wallet_id, amount, type, timestamp)
5. 최종 산출물
프론트엔드 소스코드 (GitHub Repository)
백엔드 소스코드 (GitHub Repository)
실행 가능한 데모 서버 URL (Azure 배포)
Swagger UI로 생성된 API 명세서
프로젝트 최종 발표 자료(PPT)
6. 배포 아키텍처 (Deployment Architecture - Azure)
6.1. 배포 목표
Frontend와 Backend(MSA)를 Azure 클라우드 환경에 독립적으로 배포한다.
GitHub에 코드를 Push하면 자동으로 빌드 및 배포가 이루어지는 CI/CD(지속적 통합/배포) 파이프라인을 구축한다.
각 컴포넌트에 최적화된 Azure의 관리형(Managed) 서비스를 활용하여 인프라 관리 부담을 최소화한다.
6.2. Azure 서비스 활용 계획
구분	컴포넌트	활용 Azure 서비스	선정 이유
Frontend	React SPA	Azure Static Web Apps	React와 같은 SPA 호스팅에 최적화. GitHub Actions와 완벽히 연동되어 CI/CD 구축이 매우 간편하며, 글로벌 CDN이 기본 제공됨.
Backend	Spring Boot Microservices (x3) + API Gateway	Azure Container Apps	MSA 운영을 위해 설계된 서버리스 컨테이너 플랫폼. 각 서비스를 독립적으로 배포/확장하기 용이하며, 트래픽이 없을 땐 0으로 스케일링되어 PoC에 비용 효율적.
Database	PostgreSQL	Azure Database for PostgreSQL	고가용성, 백업, 보안 등 DB 관리를 Azure가 전담하는 완전 관리형 서비스. 개발팀은 애플리케이션 개발에만 집중 가능.
Container	Docker Images	Azure Container Registry (ACR)	Spring Boot 애플리케이션을 담은 Docker 이미지를 안전하게 저장하고 관리하는 프라이빗 컨테이너 레지스트리.
CI/CD	자동화 파이프라인	GitHub Actions	GitHub Repository에 내장된 CI/CD 도구. Azure 서비스들과의 연동이 매우 원활하여 코드 Push부터 배포까지 전 과정을 자동화.

Sheets로 내보내기
6.3. 배포 흐름 (CI/CD Pipeline)
개발자가 코드를 수정하고 GitHub에 push 합니다.
(Frontend) main 브랜치에 Push
(Backend) main 브랜치에 Push
GitHub Actions가 변경을 감지하고 워크플로우를 실행합니다.
Frontend 워크플로우:
React 프로젝트를 build 합니다. (정적 파일 생성)
생성된 정적 파일들을 Azure Static Web Apps에 자동으로 배포합니다.
Backend 워크플로우 (각 서비스별로 구성):
Spring Boot 애플리케이션을 build 합니다.
Dockerfile을 이용해 애플리케이션을 Docker 이미지로 만듭니다.
생성된 Docker 이미지를 **Azure Container Registry (ACR)**에 push 합니다.
ACR의 최신 이미지를 Azure Container Apps에 자동으로 배포하여 업데이트합니다.
배포가 완료되면, 사용자는 새로운 버전의 서비스를 즉시 이용할 수 있습니다.