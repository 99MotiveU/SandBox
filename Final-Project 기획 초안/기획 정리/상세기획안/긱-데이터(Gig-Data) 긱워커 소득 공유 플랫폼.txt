긱-데이터(Gig-Data) 긱워커 소득 공유 플랫폼

1. 프로젝트 개요
1.1. 프로젝트명: 긱-데이터(Gig-Data)
1.2. 프로젝트 목표: 긱워커들이 익명으로 소득과 근무 조건을 공유하여 정보 비대칭을 해소하고, 커뮤니티를 통해 서로의 권익 향상에 필요한 정보를 교류하는 데이터 기반 플랫폼을 구축한다.
1.3. 기획 배경: 플랫폼 노동의 확산에도 불구하고, 긱워커들은 파편화되어 있어 소득 정보를 비교하거나 불합리한 처우에 공동 대응하기 어려운 구조적 문제를 겪고 있다.
1.4. 기대 효과:
사용자: 객관적 데이터에 기반한 플랫폼 선택, 소득 증대 전략 수립, 세무/법률 정보 습득.
사회: 플랫폼 노동 시장의 투명성 제고 및 건전한 생태계 조성에 기여.
2. PoC 범위 및 핵심 기능
2.1. 개발 목표: 6주 내 사용자가 소득 정산 이미지를 업로드하면 OCR로 데이터를 자동 인식하여 DB에 저장하고, 이를 바탕으로 한 통계 대시보드를 제공하는 MVP 웹 애플리케이션 개발.
2.2. 사용자 역할 정의: 긱워커, 관리자
2.3. 핵심 기능 명세:
공통: 모바일 환경에 최적화된 반응형 UI.
[핵심 UI] 이미지 파일을 드래그앤드롭으로 업로드하는 컴포넌트, OCR 처리 중 로딩 상태를 보여주는 스피너(Spinner).
[핵심 UI] 플랫폼별/지역별 평균 수입 통계를 보여주는 인터랙티브한 차트 및 테이블(정렬/필터링 기능 포함).
무한 스크롤(Infinite Scroll)이 적용된 익명 커뮤니티 게시판.
2.4. 제외 기능 (Out of Scope): 실시간 채팅, 정교한 이미지 위변조 방지, 전문가와의 직접 연결.
3. 시스템 아키텍처
3.1. 기술 스택
Frontend: React, axios, React Router
Backend: Java 17+, Spring Boot 3.x, Spring Security + JWT
Database: PostgreSQL
Etc: 외부 OCR API (e.g., Naver Clova)
3.2. 프론트엔드: React 기반의 SPA. 데이터 시각화 라이브러리(e.g., Chart.js, D3.js)를 적극적으로 활용하여 통계 정보를 직관적으로 전달.
3.3. 백엔드 아키텍처: API Gateway + 3 Microservices
3.4. 백엔드 역할 분담 (4명):
Service A: User-Service: 회원가입, 로그인, 인증 상태(소득인증 여부) 관리.
Service B: Data-Service: 이미지 업로드 처리, 외부 OCR API 연동, 텍스트 파싱 및 DB 저장.
Service C: Stats-Service: 통계 데이터 생성 및 제공, 커뮤니티 게시판 기능.
4. 데이터베이스 모델링 (PostgreSQL)
users (id, email, password, nickname, is_verified)
income_records (id, user_id, platform_name, work_date, work_hours, income_amount)
posts (id, user_id, title, content, created_at)
5. 최종 산출물
프론트엔드 소스코드 (GitHub Repository)
백엔드 소스코드 (GitHub Repository)
실행 가능한 데모 서버 URL (Azure 배포)
Swagger UI로 생성된 API 명세서
프로젝트 최종 발표 자료(PPT)
6. 배포 아키텍처 (Deployment Architecture - Azure)
6.1. 배포 목표: GitHub Actions를 통해 CI/CD를 구축하고, React Frontend와 Spring Boot MSA를 Azure의 관리형 서비스에 독립적으로 배포하여 안정적인 운영 환경을 마련한다.
6.2. Azure 서비스 활용 계획:
구분	컴포넌트	활용 Azure 서비스	선정 이유
Frontend	React SPA	Azure Static Web Apps	SPA 호스팅 및 CI/CD 구축에 최적화.
Backend	Spring Boot Microservices	Azure Container Apps	MSA 운영에 최적화된 서버리스 컨테이너 플랫폼.
Database	PostgreSQL	Azure Database for PostgreSQL	완전 관리형 서비스로 DB 운영 부담 최소화.
Container	Docker Images	Azure Container Registry (ACR)	프라이빗 Docker 이미지 저장 및 관리.
CI/CD	자동화 파이프라인	GitHub Actions	Azure 서비스들과의 완벽한 연동.

Sheets로 내보내기
6.3. 배포 흐름 (CI/CD Pipeline): 개발자가 코드를 GitHub에 Push하면, GitHub Actions가 이를 감지하여 FE는 Static Web Apps로, BE는 Docker 이미지를 빌드해 ACR을 거쳐 Container Apps로 자동 배포.