세이브-와트(Save-Watt) 에너지 최적화 플랫폼

1. 프로젝트 개요
1.1. 프로젝트명: 세이브-와트(Save-Watt)
1.2. 프로젝트 목표: 복잡한 전기요금 누진제 구조에 대한 정보 비대칭을 해소하고, 데이터 기반의 예측 및 시뮬레이션 기능을 통해 사용자의 합리적인 에너지 소비를 돕는다.
1.3. 기획 배경: 매년 8~9월 반복되는 '전기요금 폭탄' 논란 속에서, 사용자가 능동적으로 요금을 관리하고 절약할 수 있는 실용적인 IT 솔루션이 부재하다.
1.4. 기대 효과:
사용자: 요금 폭탄에 대한 불안감 해소 및 실질적인 전기요금 절감 효과.
사회: 에너지 절약 문화 확산에 기여하고, 요금제 논쟁에 데이터 기반의 시민 의견을 제시.
2. PoC 범위 및 핵심 기능
2.1. 개발 목표: 6주 내 사용자가 전력 사용량을 입력하면, 예상 요금을 계산해주고, 조건 변화에 따른 요금 변동을 시뮬레이션하는 MVP 웹 애플리케이션 개발.
2.2. 사용자 역할 정의: 일반 사용자, 관리자
2.3. 핵심 기능 명세:
공통: 직관적인 데이터 입력을 위한 UI/UX.
[핵심 UI] 예상 요금과 누진 구간을 시각적으로 보여주는 게이지(Gauge) 또는 그래프(Chart.js 등 라이브러리 활용).
[핵심 UI] "에어컨 사용 시간" 등 시나리오 변수를 조작할 수 있는 슬라이더(Slider) UI와, 그에 따라 실시간으로 변하는 예상 요금.
월별 사용량 추이를 보여주는 막대그래프.
2.4. 제외 기능 (Out of Scope): 한국전력 시스템 실시간 연동, IoT 스마트미터 연동, 요금 자동 납부.
3. 시스템 아키텍처
3.1. 기술 스택
Frontend: React, axios, React Router, Chart.js
Backend: Java 17+, Spring Boot 3.x, Spring Security + JWT
Database: PostgreSQL
3.2. 프론트엔드: React 기반의 SPA. 사용자의 입력과 시뮬레이션 조작에 따라 실시간으로 컴포넌트가 리렌더링되어 인터랙티브한 경험을 제공.
3.3. 백엔드 아키텍처: API Gateway + 3 Microservices
3.4. 백엔드 역할 분담 (4명):
Service A: User-Service: 사용자 가입/로그인, 가구 정보(계약종별 등) 관리.
Service B: Calc-Service: 핵심 엔진. 사용량(kWh)과 가구 정보를 받아 복잡한 누진제 요금을 계산하여 반환.
Service C: Usage-Service: 사용자의 월별 검침 값 이력 관리 및 통계 데이터 생성.
4. 데이터베이스 모델링 (PostgreSQL)
users (id, email, password, household_type)
energy_usages (id, user_id, year, month, usage_kwh)
elec_rates (id, section, rate, base_fee)
5. 최종 산출물
프론트엔드 소스코드 (GitHub Repository)
백엔드 소스코드 (GitHub Repository)
실행 가능한 데모 서버 URL (Azure 배포)
Swagger UI로 생성된 API 명세서
프로젝트 최종 발표 자료(PPT)
6. 배포 아키텍처 (Deployment Architecture - Azure)
6.1. 배포 목표: GitHub Actions를 통해 CI/CD를 구축하고, React Frontend와 Spring Boot MSA를 Azure의 관리형 서비스에 독립적으로 배포하여 안정적인 운영 환경을 마련한다.
6.2. Azure 서비스 활용 계획:
구분	컴포넌트	활용 Azure 서비스	선정 이유
Frontend	React SPA	Azure Static Web Apps	SPA 호스팅 및 CI/CD 구축에 최적화.
Backend	Spring Boot Microservices	Azure Container Apps	MSA 운영에 최적화된 서버리스 컨테이너 플랫폼.
Database	PostgreSQL	Azure Database for PostgreSQL	완전 관리형 서비스로 DB 운영 부담 최소화.
Container	Docker Images	Azure Container Registry (ACR)	프라이빗 Docker 이미지 저장 및 관리.
CI/CD	자동화 파이프라인	GitHub Actions	Azure 서비스들과의 완벽한 연동.

Sheets로 내보내기
6.3. 배포 흐름 (CI/CD Pipeline): 개발자가 코드를 GitHub에 Push하면, GitHub Actions가 이를 감지하여 FE는 Static Web Apps로, BE는 Docker 이미지를 빌드해 ACR을 거쳐 Container Apps로 자동 배포.