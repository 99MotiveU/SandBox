MES 프로젝트: "워크-플로우 (Work-Flow)" 상세 기획안
1. 사용자 시나리오
공장장 (홍관리):

PC에서 '워크-플로우'에 로그인하여 '신규 작업지시'를 등록한다. (제품: 원목 의자, 수량: 10개)
시스템은 '재단' -> '조립' -> '도색' -> '완료' 공정에 따라 10개의 작업 카드를 '재단' 열에 자동으로 생성한다.
사무실의 대형 스크린에 띄워진 실시간 현황판을 보며, 작업 카드들이 각 공정으로 이동하는 것을 실시간으로 확인한다.
'조립' 공정에서 작업이 지연되는 것을 보고, 현장에 가서 원인을 파악한다.
작업자 (배사원, 조립 담당):

조립 파트의 태블릿으로 '워크-플로우'에 로그인한다.
'조립 대기' 목록에 '재단'이 완료된 의자 부품 작업 카드가 10개 쌓여있는 것을 본다.
새 부품 작업을 시작하며, 해당 작업 카드의 '작업 시작' 버튼을 누른다. 카드의 상태가 '작업중'으로 바뀐다.
조립을 마치고 '작업 완료' 버튼을 누르자, 카드는 '조립 대기' 목록에서 사라지고 관리자 대시보드의 '도색' 열로 즉시 이동한다.
2. 화면 설계 (UI/UX)
관리자용 PC 화면
메인 대시보드 (실시간 현황판):
화면 전체에 '작업 대기', '재단', '조립', '도색', '완료' 등 공정별 열이 있는 칸반 보드.
각 작업 카드는 실시간으로 위치가 변경됨.
작업지시 관리: 신규 작업지시 생성(CRUD) 및 과거 이력 조회.
작업자용 태블릿/모바일 화면
로그인: 간단한 작업자 로그인.
내 작업 목록: 자신이 담당하는 공정의 '대기'와 '작업중'인 작업 카드만 단순 목록 또는 카드로 보여줌. 각 카드에는 '시작/완료' 버튼만 존재.
3. 데이터베이스 설계 (ERD)
USER	WORK_ORDER (작업지시)	PROCESS_STAGE (공정)
user_id (PK)	order_id (PK)	stage_id (PK)
username, password	product_name	stage_name ('재단')
role(MANAGER/WORKER)	quantity, created_at	sequence (순서, 1,2,3..)
WORK_ITEM (개별 작업물)	WORK_LOG (작업 이력)
item_id (PK)	log_id (PK)
order_id (FK)	item_id (FK)
current_stage_id (FK)	stage_id (FK)
status (WAITING/IN_PROGRESS/COMPLETED)	worker_id (FK)
start_time, end_time
4. 핵심 로직: 실시간 작업 현황판 업데이트
구현: Spring Boot WebSocket 활용.
프로세스:
작업자 (클라이언트): 태블릿에서 '작업 완료' 버튼을 누르면, 백엔드 API (/api/work-items/{itemId}/complete)를 호출한다.
백엔드 (서버):
API 요청을 받아 WORK_ITEM 테이블의 current_stage_id를 다음 공정 ID로 업데이트하고, status를 'WAITING'으로 변경한다.
WORK_LOG 테이블에 작업 완료 기록을 남긴다.
작업이 완료되었다는 메시지(예: {itemId: 101, fromStage: '재단', toStage: '조립'})를 WebSocket의 특정 토픽(예: /topic/workflow)으로 발행(broadcast)한다.
관리자 (클라이언트): 대시보드 페이지는 미리 해당 토픽을 구독(subscribe)하고 있다가, 새 메시지를 받으면 화면의 카드 위치를 애니메이션과 함께 '재단' 열에서 '조립' 열로 이동시킨다.
5. 구체화된 1.5개월 (6주) 개발 계획
1주차 (설계/환경): 기획 확정, DB설계, API 명세서 작성, 개발 환경 통일.
2주차 (백엔드): 회원 기능, 작업지시/공정 관리(CRUD) API 개발.
3주차 (백엔드): 작업자 상태 변경 API 및 WebSocket을 이용한 실시간 업데이트 로직 개발.
4.5주차 (프론트엔드): 관리자용 칸반 보드 대시보드 UI, 작업자용 모바일 UI 개발.
5주차 (마무리): API 및 WebSocket 전체 연동, 실시간 업데이트 기능 집중 테스트, 통합 테스트 및 버그 수정.
6주차 (배포/발표): Azure 배포, 최종 테스트 및 발표 자료/시연 준비.