1. 사용자 시나리오 (User Scenario)
선생님 (김민준 선생님):

'퀴즈핏'에 로그인하여, 담당하고 있는 '중급반'을 선택한다.
'새 퀴즈 만들기' 버튼을 눌러 '2단원 종합평가' 퀴즈를 생성한다.
문제 추가 화면에서 객관식 문제를 입력하고, 각 문제의 핵심 '키워드'(예: 'JPA', '영속성 컨텍스트')를 태그한다.
퀴즈 생성을 완료하고 '중급반' 학생들에게 퀴즈를 할당한다.
다음 날, '결과 분석' 대시보드에서 학생별 점수와 '중급반' 전체의 '취약 키워드'가 '영속성 컨텍스트'임을 한눈에 파악하고 다음 수업을 준비한다.
학생 (이하은 학생):

'퀴즈핏'에 로그인하자마자 '새로 할당된 퀴즈' 알림을 본다.
'2단원 종합평가' 퀴즈에 응시하여 문제를 푼다.
제출 즉시 100점 만점에 70점이라는 점수와 틀린 문제들을 확인한다.
'나의 약점 리포트' 메뉴에 들어가 보니, '영속성 컨텍스트'와 '즉시로딩' 키워드가 가장 취약하다고 분석된 그래프를 본다.
해당 키워드를 클릭하여 관련 오답 문제들만 모아 다시 풀어보며 복습한다.
2. 화면 설계 (UI/UX)
공통 페이지

로그인/회원가입: 역할(선생님/학생)을 선택하여 가입
선생님 전용 화면

메인 대시보드: 담당 학급 목록, 최근 출제한 퀴즈 목록, 학급별 평균 점수 요약
퀴즈 생성 페이지:
퀴즈 제목, 설명 입력란
질문, 객관식 보기(4개), 정답 선택, 핵심 키워드 입력 필드가 한 세트인 동적 폼
'질문 추가하기' 버튼으로 폼을 계속 추가 가능
결과 분석 페이지:
특정 퀴즈의 학생별 점수 리스트
학생 이름을 클릭하면 해당 학생의 상세 결과 및 '취약 키워드' 표시
학급 전체의 '취약 키워드' 분포를 보여주는 막대그래프
학생 전용 화면

메인 대시보드: '응시할 퀴즈', '완료한 퀴즈' 목록
퀴즈 응시 페이지: 한 화면에 한 문제씩 보여주며, 하단에 진행 상태 표시
결과 페이지: 점수, 맞춘/틀린 문제 표시
약점 리포트 페이지: 나의 '취약 키워드' TOP 5 차트, 키워드별 오답 문제 목록 제공
3. 데이터베이스 설계 (ERD)
주요 테이블과 관계는 다음과 같이 설계합니다. (OracleDB, MySQL, PostgreSQL 모두 적용 가능)

USER (유저)	QUIZ (퀴즈)	QUESTION (문제)
user_id (PK)	quiz_id (PK)	question_id (PK)
email (Unique)	title	quiz_id (FK)
password	description	content (질문 내용)
name	creator_id (FK)	keyword (분석용 키워드)
role (TEACHER/STUDENT)	created_at	
CHOICE (선택지)	QUIZ_ATTEMPT (응시 기록)	STUDENT_ANSWER (학생 답안)
choice_id (PK)	attempt_id (PK)	answer_id (PK)
question_id (FK)	student_id (FK)	attempt_id (FK)
content (보기 내용)	quiz_id (FK)	question_id (FK)
is_correct (Boolean)	score	selected_choice_id (FK)
completed_at	is_correct (Boolean)
4. 핵심 API 명세 (Back-end & Front-end 협업용)
기능	Method	URL	설명
인증	POST	/api/auth/login	로그인 및 JWT 토큰 발급
퀴즈 생성	POST	/api/teacher/quizzes	선생님이 새 퀴즈 생성
퀴즈 목록	GET	/api/quizzes	역할에 맞는 퀴즈 목록 조회
퀴즈 응시	POST	/api/student/quizzes/{quizId}/submit	학생이 퀴즈 답안 제출
결과 조회	GET	/api/student/attempts/{attemptId}	학생이 특정 응시 결과 조회
약점 분석	GET	/api/student/me/weakness-report	학생의 약점 키워드 분석 결과
반별 분석	GET	/api/teacher/quizzes/{quizId}/analysis	선생님이 퀴즈 결과 분석 조회
5. AI 분석 로직 구체화 (MVP 버전)
목표: 복잡한 딥러닝 없이, 빠르고 직관적인 분석 결과를 제공
프로세스:
입력: 학생이 특정 퀴즈 응시를 완료하면 STUDENT_ANSWER 테이블에서 is_correct가 false인 답안 목록을 가져온다.
키워드 추출: 틀린 답안에 해당하는 question_id를 참조하여 QUESTION 테이블에서 keyword를 모두 추출한다.
빈도수 계산: 추출된 키워드들의 빈도수를 계산한다. (예: {'JPA': 3, '영속성': 5, '로딩': 2})
결과 반환: 빈도수가 높은 순서대로 정렬하여 상위 5개 키워드를 JSON 형태로 반환한다.
구현: 초기에는 Spring Boot 내 Java 코드로 간단히 구현 가능하며, 추후 고도화를 위해 Python/Flask API로 분리하는 것을 고려합니다.
6. 구체화된 1.5개월 (6주) 개발 계획
1주차: 설계 및 환경 구축

목표: 팀원 모두가 동일한 목표와 개발 환경을 갖춘다.
Task: 위 기획안 리뷰 및 확정, 화면별 상세 기능 정의, 최종 ERD 확정, Git 레포지토리 및 브랜치 전략 수립, Spring/React 프로젝트 초기 세팅, Docker-compose로 로컬 개발 환경 통일, Azure 리소스(DB, App Service) 생성.
2주차: 백엔드 - 핵심 기능 구현

목표: 회원 및 퀴즈 생성 기능 완성.
Task: Spring Security 기반 로그인/회원가입 API 개발, 선생님의 퀴즈/문제/선택지 CRUD API 개발, Postman/Swagger를 이용한 API 테스트 및 문서화.
3주차: 백엔드 - 응시 및 분석 기능 구현

목표: 학생의 퀴즈 응시 및 분석 로직 완성.
Task: 학생의 퀴즈 응시 및 답안 제출 API 개발, 자동 채점 로직 구현, MVP 버전의 약점 키워드 분석 로직 및 API 개발.
4주차: 프론트엔드 - 핵심 화면 개발

목표: 주요 화면 UI 완성 및 API 연동 준비.
Task: 로그인/회원가입 페이지, 선생님용 퀴즈 생성 페이지, 학생용 퀴즈 응시 페이지 UI 컴포넌트 개발.
5주차: 기능 통합 및 테스트

목표: 백엔드와 프론트엔드를 연동하여 실제 동작하는 서비스 구현.
Task: 모든 API 연동, 결과/분석 대시보드 UI 개발 및 연동, 통합 테스트 진행, 주요 버그 식별 및 수정.
6주차: 배포 및 발표 준비

목표: 서비스 배포 및 프로젝트 발표 준비 완료.
Task: Docker 이미지를 빌드하여 Azure App Service에 최종 배포, 도메인 연결, 프로젝트 소개 README 작성, 발표 PPT 및 시연 영상 제작, 최종 리허설