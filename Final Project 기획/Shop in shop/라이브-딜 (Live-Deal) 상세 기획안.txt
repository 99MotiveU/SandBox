몰 (샵인샵) 프로젝트: "라이브-딜 (Live-Deal)" 상세 기획안
1. 사용자 시나리오
판매자 (박사장):

'라이브-딜'에 판매자로 회원가입 후 자신의 미니샵 '박사장네 수제 가방'을 개설한다.
신상품 '데일리 에코백'의 사진과 설명을 등록한다.
내일 저녁 8시 라이브 방송을 위해, 미리 생성해 둔 자신의 유튜브 라이브 영상 주소를 '라이브-딜'에 등록하고, 판매할 상품으로 '데일리 에코백'을 지정한다.
방송 시간이 되어 유튜브에서 라이브를 켜자, '라이브-딜' 페이지에도 방송이 송출된다. 실시간 채팅으로 고객 질문에 답변한다.
방송 종료 후, '판매 관리' 페이지에서 들어온 주문 목록을 확인하고 배송을 준비한다.
구매자 (김회원):

'라이브-딜'에 접속하여 둘러보다가 '박사장네 수제 가방'의 라이브 예고를 보고 흥미를 느낀다.
저녁 8시에 맞춰 라이브 시청 페이지에 접속한다.
판매자가 설명하는 가방의 상세 설명을 보고, 채팅으로 "방수도 되나요?"라고 질문한다.
마음에 들어 화면에 보이는 '바로 구매하기' 버튼을 누르고, 간단한 주문서(이름, 주소, 연락처)를 작성하여 제출한다.
2. 화면 설계 (UI/UX)
공통: 로그인/회원가입 페이지
판매자용 화면
판매자 대시보드: 총 주문 건수, 매출 현황 요약, 최근 주문 목록
내 상점 관리: 상점 이름, 소개글, 대표 이미지 수정
상품 관리: 상품 등록/수정/삭제(CRUD) 기능
라이브 관리: 새 라이브 등록(유튜브 주소, 제목, 소개, 방송 상품 지정), 라이브 목록 조회
구매자용/공통 화면
메인 페이지: 진행 중인 라이브, 예정된 라이브, 인기 상품 목록 노출
라이브 시청 페이지:
좌측: 유튜브 영상이 임베드된 플레이어 영역
중앙: 현재 방송에서 판매 중인 상품 정보(사진, 가격)와 '바로 구매하기' 버튼
우측: 실시간 채팅 영역 (WebSocket 기반)
주문 페이지: 배송지 정보를 입력하는 간단한 주문서 폼
3. 데이터베이스 설계 (ERD)
USER	SHOP	PRODUCT
user_id (PK)	shop_id (PK)	product_id (PK)
email, password, name	seller_id (FK)	shop_id (FK)
role (SELLER/BUYER)	shop_name, description	name, price, description
LIVE_STREAM	ORDERS (주문)	CHAT_MESSAGE
stream_id (PK)	order_id (PK)	message_id (PK)
shop_id (FK)	buyer_id (FK)	stream_id (FK)
title, youtube_url	product_id (FK)	user_id (FK)
status (SCHEDULED/LIVE/ENDED)	order_status	message, created_at
stream_at	created_at	
4. 핵심 로직: 라이브 연동 및 실시간 채팅
라이브 연동:
판매자가 입력한 유튜브 URL에서 영상 ID (youtube.com/watch?v=영상ID)를 추출하여 저장합니다.
프론트엔드에서는 react-player 같은 라이브러리를 사용하여 이 영상 ID로 유튜브 영상을 임베드(embed)합니다.
핵심은 우리 서비스가 직접 영상을 스트리밍하는 것이 아니라, 유튜브라는 외부 서비스를 '연동'하여 보여주는 것입니다.
실시간 채팅:
Spring Boot WebSocket과 Stomp 프로토콜을 사용하여 채팅 서버를 구현합니다.
클라이언트(React)는 라이브 시청 페이지에 접속 시 WebSocket으로 서버와 연결하고, 특정 채팅방(예: /topic/chat/{stream_id})을 구독합니다.
메시지를 보내면 서버를 거쳐 해당 채팅방을 구독 중인 모든 클라이언트에게 실시간으로 메시지가 전송됩니다.
5. 구체화된 1.5개월 (6주) 개발 계획
1주차 (설계/환경): 기획 확정, DB설계, API 명세서 작성, 개발 환경 통일.
2주차 (백엔드): 회원(판매자/구매자) 기능, 상점 및 상품 관리(CRUD) API 개발.
3주차 (백엔드): 라이브 방송 등록/관리 API, 실시간 채팅(WebSocket) 기능 개발.
4.5주차 (프론트엔드/통합): 로그인, 상품/상점 페이지 UI 개발 및 API 연동, 라이브 시청 페이지(유튜브 임베드, 채팅) UI 개발 및 WebSocket 연동.
5주차 (마무리): 주문하기 기능 구현 및 통합 테스트, 전체 기능 플로우 테스트 및 버그 수정.
6주차 (배포/발표): Azure 배포, 최종 테스트 및 발표 자료/시연 준비.